<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LCA</title>
    <url>/0cy/LCA/</url>
    <content><![CDATA[<h1 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h1><h2 id="求層數"><a href="#求層數" class="headerlink" title="求層數"></a>求層數</h2><p>進行 DFS 遍歷整棵樹</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visited[p] = <span class="literal">true</span>;</span><br><span class="line">    dep[p] = d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : child[p]) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[c]) </span><br><span class="line">        &#123;</span><br><span class="line">            parent[c][<span class="number">0</span>] = p;</span><br><span class="line">            <span class="built_in">dfs</span>(c, d + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="找出每個節點的-2-j-倍祖先"><a href="#找出每個節點的-2-j-倍祖先" class="headerlink" title="找出每個節點的 $2^j$ 倍祖先"></a>找出每個節點的 $2^j$ 倍祖先</h2><p>定義 <code>parent[i][j]</code> 為節點 $i$ 的第 $2^j$ 倍祖先</p>
<p>對於 <code>parent[i][j]</code> :</p>
<ul>
<li><p><code>parent[i][0]</code> = 節點 $i$ 的直接父節點</p>
</li>
<li><p><code>parent[i][j]</code> = <code>parent[parent[i][j - 1]][j - 1]</code></p>
<p>意思是說 : 節點 $i$ 的 $2^i$ 祖先，可以通過 $i$ 的 $2^{j-1}$ 祖先的 $2^{j-1}$ 祖先來找到</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[i][j - <span class="number">1</span>] != <span class="number">-1</span>)</span><br><span class="line">            parent[i][j] = parent[parent[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent[i][j] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="利用倍增法求兩點的-LCA"><a href="#利用倍增法求兩點的-LCA" class="headerlink" title="利用倍增法求兩點的 LCA"></a>利用倍增法求兩點的 LCA</h2><p>函式 <code>lca</code> 接收參數 $a$ 與 $b$ 並計算他們的 LCA</p>
<p>步驟 :</p>
<ol>
<li>讓 $b$ 成為較深的節點，確保調整時是將較深的節點向上移動</li>
<li>若兩者深度不同，將 $b$ 向上移動至與 $a$ 相同深度</li>
<li>若調整後 $a$ 和 $b$ 已經相同，則回傳此節點即為 LCA</li>
<li>從高位開始，逐步比較雙方的祖先，若不同則同時向上移動</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 讓 b 成為較深的節點，確保調整時是將較深的節點向上移動</span></span><br><span class="line">    <span class="keyword">if</span> (dep[b] &lt; dep[a]) <span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若兩者深度不同，將 b 向上移動至與 a 相同深度</span></span><br><span class="line">    <span class="keyword">if</span> (dep[a] != dep[b]) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> dif = dep[b] - dep[a];       </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++) </span><br><span class="line">        	<span class="keyword">if</span> (dif &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">            	b = parent[b][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若調整後 a 和 b 已經相同，則回傳此節點即為 LCA</span></span><br><span class="line">    <span class="keyword">if</span> (a == b) </span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 從高位開始，逐步比較雙方的祖先，若不同則同時向上移動</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[a][i] != parent[b][i]) </span><br><span class="line">        &#123;</span><br><span class="line">            a = parent[a][i];</span><br><span class="line">            b = parent[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> parent[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="例題"><a href="#例題" class="headerlink" title="例題"></a>例題</h1><h2 id="P3379【模板】最近公共祖先（LCA）"><a href="#P3379【模板】最近公共祖先（LCA）" class="headerlink" title="P3379【模板】最近公共祖先（LCA）"></a>P3379【模板】最近公共祖先（LCA）</h2><p><a href="https://www.luogu.com.cn/problem/P3379">洛谷-P3379</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; child[<span class="number">500005</span>];</span><br><span class="line"><span class="type">int</span> dep[<span class="number">500005</span>], parent[<span class="number">500005</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">bool</span> visited[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visited[p] = <span class="literal">true</span>;</span><br><span class="line">    dep[p] = d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : child[p]) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[c]) </span><br><span class="line">        &#123;</span><br><span class="line">            parent[c][<span class="number">0</span>] = p;</span><br><span class="line">            <span class="built_in">dfs</span>(c, d + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[b] &lt; dep[a])</span><br><span class="line">        <span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dif = dep[b] - dep[a];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++) </span><br><span class="line">        <span class="keyword">if</span> (dif &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">            b = parent[b][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[a][i] != parent[b][i]) </span><br><span class="line">        &#123;</span><br><span class="line">            a = parent[a][i];</span><br><span class="line">            b = parent[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parent[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N, M, S;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M &gt;&gt; S;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; N - <span class="number">1</span>; t++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"></span><br><span class="line">        child[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        child[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(S, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent[i][j - <span class="number">1</span>] != <span class="number">-1</span>)</span><br><span class="line">                parent[i][j] = parent[parent[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (M--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="built_in">lca</span>(a, b) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1687-樹上詢問-Query-on-a-Tree-II"><a href="#1687-樹上詢問-Query-on-a-Tree-II" class="headerlink" title="1687 . 樹上詢問 (Query on a Tree II)"></a>1687 . 樹上詢問 (Query on a Tree II)</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1687">TIOJ-1687</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dep[<span class="number">100005</span>], parent[<span class="number">100005</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">bool</span> visited[<span class="number">100005</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; child[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    visited[p] = <span class="literal">true</span>;</span><br><span class="line">    dep[p] = d + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : child[p])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[c]) </span><br><span class="line">        &#123;</span><br><span class="line">            parent[c][<span class="number">0</span>] = p;</span><br><span class="line">            <span class="built_in">dfs</span>(c, d + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">moveUp</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span> &amp;&amp; k &gt; <span class="number">0</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">            n = parent[n][i];</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span>) <span class="keyword">break</span>; <span class="comment">// 防止走出樹外</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findLCA</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> e)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[e] &lt; dep[s])</span><br><span class="line">        <span class="built_in">swap</span>(s, e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 將 e 提升到與 s 相同深度</span></span><br><span class="line">    <span class="type">int</span> dif = dep[e] - dep[s];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        <span class="keyword">if</span> (dif &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">            e = parent[e][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s == e) </span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同時提升 s 和 e，直到找到共同祖先</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[s][i] != parent[e][i])</span><br><span class="line">        &#123;</span><br><span class="line">            s = parent[s][i];</span><br><span class="line">            e = parent[e][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parent[s][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        child[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        child[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">            parent[i][j] = parent[parent[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> start, end, k;</span><br><span class="line">        cin &gt;&gt; start &gt;&gt; end &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> LCA = <span class="built_in">findLCA</span>(start, end);</span><br><span class="line">        <span class="type">int</span> dS = dep[start] - dep[LCA];</span><br><span class="line">        <span class="type">int</span> dE = dep[end] - dep[LCA];</span><br><span class="line">        <span class="type">int</span> totalD = dS + dE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k &gt; totalD)</span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &lt;= dS) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 在 start 到 LCA 的路徑上</span></span><br><span class="line">            cout &lt;&lt; <span class="built_in">moveUp</span>(start, k) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 在 LCA 到 end 的路徑上</span></span><br><span class="line">            cout &lt;&lt; <span class="built_in">moveUp</span>(end, dE - (k - dS)) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2172-物種演化-Evolution"><a href="#2172-物種演化-Evolution" class="headerlink" title="2172 . 物種演化 (Evolution)"></a>2172 . 物種演化 (Evolution)</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/2172">TIOJ-2172</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dep[<span class="number">100005</span>], parent[<span class="number">100005</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">bool</span> visited[<span class="number">100005</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; child[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visited[p] = <span class="literal">true</span>;</span><br><span class="line">    dep[p] = d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : child[p])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[c])</span><br><span class="line">        &#123;</span><br><span class="line">            parent[c][<span class="number">0</span>] = p;</span><br><span class="line">            <span class="built_in">dfs</span>(c, d + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[y] &lt; dep[x])</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> d = dep[y] - dep[x];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (d &amp; (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">            y = parent[y][i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x][i] != parent[y][i])</span><br><span class="line">        &#123;</span><br><span class="line">            x = parent[x][i];</span><br><span class="line">            y = parent[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parent[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; n - <span class="number">1</span>; t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        cin &gt;&gt; i &gt;&gt; j;</span><br><span class="line"></span><br><span class="line">        child[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">        child[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent[i][j - <span class="number">1</span>] != <span class="number">-1</span>)</span><br><span class="line">                parent[i][j] = parent[parent[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                parent[i][j] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> LCA = <span class="built_in">lca</span>(x, y);</span><br><span class="line">        cout &lt;&lt; dep[x] + dep[y] - <span class="number">2</span> * dep[LCA] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>競程筆記</category>
      </categories>
      <tags>
        <tag>樹論</tag>
      </tags>
  </entry>
</search>
